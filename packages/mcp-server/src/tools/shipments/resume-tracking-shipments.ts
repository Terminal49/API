// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'terminal49-mcp/filtering';
import { Metadata, asTextContentResult } from 'terminal49-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Terminal49 from 'terminal49';

export const metadata: Metadata = {
  resource: 'shipments',
  operation: 'write',
  tags: [],
  httpMethod: 'patch',
  httpPath: '/shipments/{id}/resume_tracking',
  operationId: 'patch-shipments-id-resume-tracking',
};

export const tool: Tool = {
  name: 'resume_tracking_shipments',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nResume tracking a shipment.  Keep in mind that some information is only made available by our data sources at specific times, so a stopped and resumed shipment may have some information missing.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      $ref: '#/$defs/shipment'\n    }\n  },\n  $defs: {\n    shipment: {\n      type: 'object',\n      title: 'Shipment model',\n      properties: {\n        id: {\n          type: 'string'\n        },\n        attributes: {\n          type: 'object',\n          properties: {\n            bill_of_lading_number: {\n              type: 'string'\n            },\n            created_at: {\n              type: 'string',\n              format: 'date-time'\n            },\n            customer_name: {\n              type: 'string'\n            },\n            destination_ata_at: {\n              type: 'string',\n              format: 'date-time'\n            },\n            destination_eta_at: {\n              type: 'string',\n              format: 'date-time'\n            },\n            destination_locode: {\n              type: 'string',\n              description: 'UN/LOCODE'\n            },\n            destination_name: {\n              type: 'string'\n            },\n            destination_timezone: {\n              type: 'string',\n              description: 'IANA tz'\n            },\n            line_tracking_last_attempted_at: {\n              type: 'string',\n              description: 'When Terminal49 last tried to update the shipment status from the shipping line',\n              format: 'date-time'\n            },\n            line_tracking_last_succeeded_at: {\n              type: 'string',\n              description: 'When Terminal49 last successfully updated the shipment status from the shipping line',\n              format: 'date-time'\n            },\n            line_tracking_stopped_at: {\n              type: 'string',\n              description: 'When Terminal49 stopped checking at the shipping line',\n              format: 'date-time'\n            },\n            line_tracking_stopped_reason: {\n              type: 'string',\n              description: 'The reason Terminal49 stopped checking',\n              enum: [                'all_containers_terminated',\n                'past_arrival_window',\n                'no_updates_at_line',\n                'cancelled_by_user',\n                'booking_cancelled'\n              ]\n            },\n            normalized_number: {\n              type: 'string',\n              description: 'The normalized version of the shipment number used for querying the carrier'\n            },\n            pod_ata_at: {\n              type: 'string',\n              format: 'date-time'\n            },\n            pod_eta_at: {\n              type: 'string',\n              format: 'date-time'\n            },\n            pod_original_eta_at: {\n              type: 'string',\n              format: 'date-time'\n            },\n            pod_timezone: {\n              type: 'string',\n              description: 'IANA tz'\n            },\n            pod_vessel_imo: {\n              type: 'string'\n            },\n            pod_vessel_name: {\n              type: 'string'\n            },\n            pod_voyage_number: {\n              type: 'string'\n            },\n            pol_atd_at: {\n              type: 'string',\n              format: 'date-time'\n            },\n            pol_etd_at: {\n              type: 'string',\n              format: 'date-time'\n            },\n            pol_timezone: {\n              type: 'string',\n              description: 'IANA tz'\n            },\n            port_of_discharge_locode: {\n              type: 'string',\n              description: 'UN/LOCODE'\n            },\n            port_of_discharge_name: {\n              type: 'string'\n            },\n            port_of_lading_locode: {\n              type: 'string',\n              description: 'UN/LOCODE'\n            },\n            port_of_lading_name: {\n              type: 'string'\n            },\n            ref_numbers: {\n              type: 'array',\n              items: {\n                type: 'string'\n              }\n            },\n            shipping_line_name: {\n              type: 'string'\n            },\n            shipping_line_scac: {\n              type: 'string'\n            },\n            shipping_line_short_name: {\n              type: 'string'\n            },\n            tags: {\n              type: 'array',\n              items: {\n                type: 'string'\n              }\n            }\n          },\n          required: [            'bill_of_lading_number'\n          ]\n        },\n        links: {\n          type: 'object',\n          properties: {\n            self: {\n              type: 'string'\n            }\n          },\n          required: [            'self'\n          ]\n        },\n        relationships: {\n          type: 'object',\n          properties: {\n            containers: {\n              type: 'object',\n              properties: {\n                data: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string',\n                        enum: [                          'container'\n                        ]\n                      }\n                    },\n                    required: [                      'id',\n                      'type'\n                    ]\n                  }\n                }\n              }\n            },\n            destination: {\n              type: 'object',\n              properties: {\n                data: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string'\n                    },\n                    type: {\n                      type: 'string',\n                      enum: [                        'port',\n                        'metro_area'\n                      ]\n                    }\n                  },\n                  required: [                    'id',\n                    'type'\n                  ]\n                }\n              }\n            },\n            destination_terminal: {\n              type: 'object',\n              properties: {\n                data: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string'\n                    },\n                    type: {\n                      type: 'string',\n                      enum: [                        'terminal',\n                        'rail_terminal'\n                      ]\n                    }\n                  },\n                  required: [                    'id',\n                    'type'\n                  ]\n                }\n              }\n            },\n            line_tracking_stopped_by_user: {\n              type: 'object',\n              properties: {\n                data: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string'\n                    },\n                    type: {\n                      type: 'string',\n                      enum: [                        'user'\n                      ]\n                    }\n                  },\n                  required: [                    'id',\n                    'type'\n                  ]\n                }\n              }\n            },\n            pod_terminal: {\n              type: 'object',\n              properties: {\n                data: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string'\n                    },\n                    type: {\n                      type: 'string',\n                      enum: [                        'terminal'\n                      ]\n                    }\n                  },\n                  required: [                    'id',\n                    'type'\n                  ]\n                }\n              }\n            },\n            port_of_discharge: {\n              type: 'object',\n              properties: {\n                data: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string'\n                    },\n                    type: {\n                      type: 'string',\n                      enum: [                        'port'\n                      ]\n                    }\n                  },\n                  required: [                    'id',\n                    'type'\n                  ]\n                }\n              }\n            },\n            port_of_lading: {\n              type: 'object',\n              properties: {\n                data: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string'\n                    },\n                    type: {\n                      type: 'string',\n                      enum: [                        'port'\n                      ]\n                    }\n                  },\n                  required: [                    'id',\n                    'type'\n                  ]\n                }\n              }\n            }\n          }\n        },\n        type: {\n          type: 'string',\n          enum: [            'shipment'\n          ]\n        }\n      },\n      required: [        'id',\n        'attributes',\n        'links',\n        'relationships',\n        'type'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {},
};

export const handler = async (client: Terminal49, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.shipments.resumeTracking(id)));
};

export default { metadata, tool, handler };
